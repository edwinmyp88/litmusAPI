[
    {
        "id": "781224d6064896f6",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8e44c4936852bf1d",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4b68bfc32f930f1c",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "399ae0bbb6479748",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8599581f0e8197ce",
        "type": "tab",
        "label": "Flow 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5c83f8765f29479f",
        "type": "tab",
        "label": "Flow 6",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "40dc11812e2f50cf",
        "type": "tab",
        "label": "Flow 7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d51c145170155018",
        "type": "tab",
        "label": "Flow 8",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eac46d969b6a844c",
        "type": "tab",
        "label": "Flow 10",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "07faf086ce88aab0",
        "type": "tab",
        "label": "Flow 11",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a215c175be6747f4",
        "type": "tab",
        "label": "Flow 12",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "aba326dbe5621f19",
        "type": "tab",
        "label": "Flow 9",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "83c3ec36bf6fe84f",
        "type": "tab",
        "label": "Flow 15",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2e2aa3d68094aba1",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [],
        "out": []
    },
    {
        "id": "99aa93fffde390a2",
        "type": "MSSQL-CN",
        "name": "litmus",
        "server": "192.168.0.232",
        "port": "",
        "encyption": false,
        "trustServerCertificate": false,
        "database": "",
        "useUTC": false,
        "connectTimeout": "",
        "requestTimeout": "",
        "cancelTimeout": "",
        "pool": "",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "3a108e85f3c6ac98",
        "type": "MSSQL-CN",
        "tdsVersion": "7_4",
        "name": "Litmus Live",
        "server": "192.168.0.188",
        "port": "1433",
        "encyption": true,
        "trustServerCertificate": true,
        "database": "litmus",
        "useUTC": true,
        "connectTimeout": "15000",
        "requestTimeout": "15000",
        "cancelTimeout": "5000",
        "pool": "5",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    },
    {
        "id": "67276a6374171bac",
        "type": "subflow:2e2aa3d68094aba1",
        "z": "2e2aa3d68094aba1",
        "name": "",
        "x": 400,
        "y": 180,
        "wires": []
    },
    {
        "id": "b085b0b23bc382ed",
        "type": "inject",
        "z": "781224d6064896f6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"id\":1735883}",
        "payloadType": "json",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "61aa3f13f032ea3d"
            ]
        ]
    },
    {
        "id": "9348b5c869f38884",
        "type": "debug",
        "z": "781224d6064896f6",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 320,
        "wires": []
    },
    {
        "id": "fee91fa4c4ce8fbc",
        "type": "function",
        "z": "781224d6064896f6",
        "name": "Query ",
        "func": "let id = msg.payload.id;\nmsg.topic = 'SELECT * FROM litmus.dbo.scrapHistory WHERE id = @id';\n\nmsg.payload = [{\n    \"name\": \"id\",\n    \"value\": id,\n    \"type\": \"Int\"\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 240,
        "wires": [
            [
                "86d5c79e8b997f4c"
            ]
        ]
    },
    {
        "id": "86d5c79e8b997f4c",
        "type": "MSSQL",
        "z": "781224d6064896f6",
        "mssqlCN": "3a108e85f3c6ac98",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "topic",
        "queryOptType": "msg",
        "paramsOpt": "payload",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": false,
        "params": [],
        "x": 560,
        "y": 300,
        "wires": [
            [
                "eaf95650aebc800e",
                "9348b5c869f38884"
            ]
        ]
    },
    {
        "id": "76d930f112b2eef8",
        "type": "http in",
        "z": "781224d6064896f6",
        "name": "",
        "url": "/scrapHistory",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "61aa3f13f032ea3d"
            ]
        ]
    },
    {
        "id": "eaf95650aebc800e",
        "type": "http response",
        "z": "781224d6064896f6",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 240,
        "wires": []
    },
    {
        "id": "8c1acad8d24d06ff",
        "type": "comment",
        "z": "781224d6064896f6",
        "name": "Get Scrap History by ID",
        "info": "",
        "x": 160,
        "y": 60,
        "wires": []
    },
    {
        "id": "91b89bdabd162dbd",
        "type": "http response",
        "z": "781224d6064896f6",
        "name": "",
        "statusCode": "429",
        "headers": {},
        "x": 740,
        "y": 120,
        "wires": []
    },
    {
        "id": "61aa3f13f032ea3d",
        "type": "rate-limiter",
        "z": "781224d6064896f6",
        "delay_action": "ratelimit",
        "rate": "100",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "drop_select": "drop",
        "addcurrentcount": false,
        "name": "",
        "outputs": "2",
        "buffer_size": "0",
        "buffer_drop": "buffer_drop_new",
        "emit_msg_2nd": true,
        "control_topic": "",
        "version": 0.0018,
        "x": 481.1111111111111,
        "y": 180,
        "wires": [
            [
                "fee91fa4c4ce8fbc"
            ],
            [
                "91b89bdabd162dbd"
            ]
        ]
    },
    {
        "id": "97add08248542058",
        "type": "inject",
        "z": "8e44c4936852bf1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"asset\":\"Line 1\"}",
        "payloadType": "json",
        "x": 260,
        "y": 280,
        "wires": [
            [
                "5405e7be0837aaaa"
            ]
        ]
    },
    {
        "id": "4516e0f829afa3f9",
        "type": "debug",
        "z": "8e44c4936852bf1d",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 360,
        "wires": []
    },
    {
        "id": "7e6e9a105ee304ac",
        "type": "function",
        "z": "8e44c4936852bf1d",
        "name": "function 2",
        "func": "let line, asset;\nif (msg.req && msg.req.query){\n    line = msg.req.query.line;\n    asset = msg.req.query.asset;\n} else {\n    line = msg.payload.line;\n    asset = msg.payload.asset;\n}\nmsg.topic = 'SELECT TOP 100 * FROM litmus.dbo.scrapHistory WHERE line = @line AND asset = @asset';\n\nmsg.payload = [\n    { name: \"line\", type: \"VarChar\", value: line },\n    { name: \"asset\", type: \"Varchar\", value: asset}\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 300,
        "wires": [
            [
                "b8899be5a56ca909",
                "2dc3755ef77f1a54"
            ]
        ]
    },
    {
        "id": "b8899be5a56ca909",
        "type": "MSSQL",
        "z": "8e44c4936852bf1d",
        "mssqlCN": "3a108e85f3c6ac98",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "topic",
        "queryOptType": "msg",
        "paramsOpt": "payload",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": false,
        "params": [],
        "x": 720,
        "y": 300,
        "wires": [
            [
                "4516e0f829afa3f9",
                "c3584ec5ea25f064"
            ]
        ]
    },
    {
        "id": "2dc3755ef77f1a54",
        "type": "debug",
        "z": "8e44c4936852bf1d",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 360,
        "wires": []
    },
    {
        "id": "efe9628fe980f975",
        "type": "http in",
        "z": "8e44c4936852bf1d",
        "name": "",
        "url": "/scrapHistory/findByLineAndMachine",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "5405e7be0837aaaa"
            ]
        ]
    },
    {
        "id": "c3584ec5ea25f064",
        "type": "http response",
        "z": "8e44c4936852bf1d",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 940,
        "y": 300,
        "wires": []
    },
    {
        "id": "90bbc66fb2da96f6",
        "type": "comment",
        "z": "8e44c4936852bf1d",
        "name": "Get scrap history by line number and machine number",
        "info": "",
        "x": 260,
        "y": 60,
        "wires": []
    },
    {
        "id": "2952e54a9a1b6e39",
        "type": "http response",
        "z": "8e44c4936852bf1d",
        "name": "",
        "statusCode": "429",
        "headers": {},
        "x": 780,
        "y": 180,
        "wires": []
    },
    {
        "id": "5405e7be0837aaaa",
        "type": "rate-limiter",
        "z": "8e44c4936852bf1d",
        "delay_action": "ratelimit",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "drop_select": "drop",
        "addcurrentcount": false,
        "name": "",
        "outputs": "2",
        "buffer_size": "0",
        "buffer_drop": "buffer_drop_new",
        "emit_msg_2nd": true,
        "control_topic": "",
        "version": 0.0018,
        "x": 520,
        "y": 220,
        "wires": [
            [
                "7e6e9a105ee304ac"
            ],
            [
                "2952e54a9a1b6e39"
            ]
        ]
    },
    {
        "id": "dc969e02096fc6bf",
        "type": "comment",
        "z": "4b68bfc32f930f1c",
        "name": "Get scrap description by scrap code",
        "info": "",
        "x": 200,
        "y": 60,
        "wires": []
    },
    {
        "id": "87c0b6caf5b92404",
        "type": "inject",
        "z": "4b68bfc32f930f1c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"scrapCodes\":1}",
        "payloadType": "json",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "f85dc88c1d4a6551"
            ]
        ]
    },
    {
        "id": "c9364029b045fddf",
        "type": "debug",
        "z": "4b68bfc32f930f1c",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 460,
        "wires": []
    },
    {
        "id": "4f98634dc1e852fd",
        "type": "function",
        "z": "4b68bfc32f930f1c",
        "name": "Query",
        "func": "let scrapCodes = msg.payload.scrapCodes;\nmsg.topic = 'SELECT scrapCode, scrapCode_text FROM litmus.dbo.scrapCodes;'\nmsg.payload = [{\n    name: \"scrapCode\",\n    type: \"Int\",\n    value: scrapCodes\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 423.3333333333333,
        "y": 380,
        "wires": [
            [
                "ba25ded17b921c9a",
                "d5830ca0a8639598"
            ]
        ]
    },
    {
        "id": "ba25ded17b921c9a",
        "type": "MSSQL",
        "z": "4b68bfc32f930f1c",
        "mssqlCN": "3a108e85f3c6ac98",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "topic",
        "queryOptType": "msg",
        "paramsOpt": "payload",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": false,
        "params": [],
        "x": 588.8888888888889,
        "y": 380,
        "wires": [
            [
                "c9364029b045fddf",
                "96a2a3701b0cb522"
            ]
        ]
    },
    {
        "id": "d5830ca0a8639598",
        "type": "debug",
        "z": "4b68bfc32f930f1c",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 520,
        "wires": []
    },
    {
        "id": "96a2a3701b0cb522",
        "type": "http response",
        "z": "4b68bfc32f930f1c",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 820,
        "y": 340,
        "wires": []
    },
    {
        "id": "93515414cba9135f",
        "type": "http in",
        "z": "4b68bfc32f930f1c",
        "name": "",
        "url": "/scrapCodes",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "f85dc88c1d4a6551"
            ]
        ]
    },
    {
        "id": "f85dc88c1d4a6551",
        "type": "rate-limiter",
        "z": "4b68bfc32f930f1c",
        "delay_action": "ratelimit",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "drop_select": "drop",
        "addcurrentcount": false,
        "name": "",
        "outputs": "2",
        "buffer_size": "0",
        "buffer_drop": "buffer_drop_new",
        "emit_msg_2nd": true,
        "control_topic": "",
        "version": 0.0018,
        "x": 491.1111111111111,
        "y": 280,
        "wires": [
            [
                "4f98634dc1e852fd"
            ],
            [
                "72709647b8574185"
            ]
        ]
    },
    {
        "id": "72709647b8574185",
        "type": "http response",
        "z": "4b68bfc32f930f1c",
        "name": "",
        "statusCode": "429",
        "headers": {},
        "x": 720,
        "y": 200,
        "wires": []
    },
    {
        "id": "381ecf2523d332c7",
        "type": "link in",
        "z": "4b68bfc32f930f1c",
        "name": "link in 2",
        "links": [
            "243c2bcc3a89e8de",
            "7263b715c4873c52"
        ],
        "x": 225,
        "y": 120,
        "wires": [
            [
                "f85dc88c1d4a6551"
            ]
        ]
    },
    {
        "id": "43d899a8f339ddc5",
        "type": "comment",
        "z": "399ae0bbb6479748",
        "name": "Get user information (incident response team)",
        "info": "",
        "x": 230,
        "y": 60,
        "wires": []
    },
    {
        "id": "e09e406b2ef37354",
        "type": "inject",
        "z": "399ae0bbb6479748",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"id\":\"U001\"}",
        "payloadType": "json",
        "x": 161.1111111111111,
        "y": 340,
        "wires": [
            [
                "6d54ac6c8b54e4bc"
            ]
        ]
    },
    {
        "id": "f26d354e134f88eb",
        "type": "debug",
        "z": "399ae0bbb6479748",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 711.1111111111111,
        "y": 340,
        "wires": []
    },
    {
        "id": "9f9b3249a44808b4",
        "type": "function",
        "z": "399ae0bbb6479748",
        "name": "function 4",
        "func": "let id = msg.payload.id;\nmsg.topic = 'SELECT * FROM litmus.dbo.incident_user WHERE id = @id';\n\nmsg.payload = [{\n    \"name\": \"id\",\n    \"value\": id,\n    \"type\": \"VarChar\"\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 351.1111111111111,
        "y": 340,
        "wires": [
            [
                "6cdb09f23bb35a6a",
                "60a8593c81f11147"
            ]
        ]
    },
    {
        "id": "6cdb09f23bb35a6a",
        "type": "MSSQL",
        "z": "399ae0bbb6479748",
        "mssqlCN": "3a108e85f3c6ac98",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "topic",
        "queryOptType": "msg",
        "paramsOpt": "payload",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": false,
        "params": [],
        "x": 531.1111111111111,
        "y": 340,
        "wires": [
            [
                "f26d354e134f88eb",
                "b6c72982e30c90da"
            ]
        ]
    },
    {
        "id": "60a8593c81f11147",
        "type": "debug",
        "z": "399ae0bbb6479748",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 531.1111111111111,
        "y": 420,
        "wires": []
    },
    {
        "id": "2b189ffcb47cd3fb",
        "type": "http in",
        "z": "399ae0bbb6479748",
        "name": "",
        "url": "/incidentUser",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 161.1111111111111,
        "y": 200,
        "wires": [
            [
                "6d54ac6c8b54e4bc"
            ]
        ]
    },
    {
        "id": "b6c72982e30c90da",
        "type": "http response",
        "z": "399ae0bbb6479748",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 711.1111111111111,
        "y": 260,
        "wires": []
    },
    {
        "id": "6d54ac6c8b54e4bc",
        "type": "rate-limiter",
        "z": "399ae0bbb6479748",
        "delay_action": "ratelimit",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "drop_select": "drop",
        "addcurrentcount": false,
        "name": "",
        "outputs": "2",
        "buffer_size": "0",
        "buffer_drop": "buffer_drop_new",
        "emit_msg_2nd": true,
        "control_topic": "",
        "version": 0.0018,
        "x": 431.1111111111111,
        "y": 240,
        "wires": [
            [
                "9f9b3249a44808b4"
            ],
            [
                "c1e24d5c38f68e27"
            ]
        ]
    },
    {
        "id": "c1e24d5c38f68e27",
        "type": "http response",
        "z": "399ae0bbb6479748",
        "name": "",
        "statusCode": "429",
        "headers": {},
        "x": 660,
        "y": 160,
        "wires": []
    },
    {
        "id": "6ac563ee05670e0b",
        "type": "link in",
        "z": "399ae0bbb6479748",
        "name": "link in 3",
        "links": [
            "e57b1204d08e1187",
            "c304a2eae6139a82"
        ],
        "x": 236.1111111111111,
        "y": 140,
        "wires": [
            [
                "6d54ac6c8b54e4bc"
            ]
        ]
    },
    {
        "id": "28d0ad7ea3b6b64d",
        "type": "comment",
        "z": "8599581f0e8197ce",
        "name": "Get event details based on downtime duration",
        "info": "",
        "x": 230,
        "y": 60,
        "wires": []
    },
    {
        "id": "905dadbc54f25e4d",
        "type": "inject",
        "z": "8599581f0e8197ce",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"duration\":50}",
        "payloadType": "json",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "78f38c616b0752d4"
            ]
        ]
    },
    {
        "id": "48d3fec26bd6e648",
        "type": "debug",
        "z": "8599581f0e8197ce",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 320,
        "wires": []
    },
    {
        "id": "afbf8f8d236b72fa",
        "type": "function",
        "z": "8599581f0e8197ce",
        "name": "function 5",
        "func": "let duration = msg.payload.duration;\nmsg.topic = 'SELECT TOP 100 * FROM litmus.dbo.downtimeHistory WHERE duration > @duration ORDER BY duration';\n\nmsg.payload = [{\n    \"name\": \"duration\",\n    \"value\": duration,\n    \"type\": \"Int\"\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 320,
        "wires": [
            [
                "2dcf320f50960c13",
                "4fb286823981e7b1"
            ]
        ]
    },
    {
        "id": "2dcf320f50960c13",
        "type": "MSSQL",
        "z": "8599581f0e8197ce",
        "mssqlCN": "3a108e85f3c6ac98",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "topic",
        "queryOptType": "msg",
        "paramsOpt": "payload",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": false,
        "params": [],
        "x": 480,
        "y": 320,
        "wires": [
            [
                "48d3fec26bd6e648",
                "d9084b4f0eb2d21a"
            ]
        ]
    },
    {
        "id": "4fb286823981e7b1",
        "type": "debug",
        "z": "8599581f0e8197ce",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 400,
        "wires": []
    },
    {
        "id": "f67f7d0bbfac97b8",
        "type": "http in",
        "z": "8599581f0e8197ce",
        "name": "",
        "url": "/downtimeHistory",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 240,
        "wires": [
            [
                "78f38c616b0752d4"
            ]
        ]
    },
    {
        "id": "d9084b4f0eb2d21a",
        "type": "http response",
        "z": "8599581f0e8197ce",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 660,
        "y": 240,
        "wires": []
    },
    {
        "id": "78f38c616b0752d4",
        "type": "rate-limiter",
        "z": "8599581f0e8197ce",
        "delay_action": "ratelimit",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "drop_select": "drop",
        "addcurrentcount": false,
        "name": "",
        "outputs": "2",
        "buffer_size": "0",
        "buffer_drop": "buffer_drop_new",
        "emit_msg_2nd": true,
        "control_topic": "",
        "version": 0.0018,
        "x": 380,
        "y": 240,
        "wires": [
            [
                "afbf8f8d236b72fa"
            ],
            [
                "340f27c014bdf78d"
            ]
        ]
    },
    {
        "id": "340f27c014bdf78d",
        "type": "http response",
        "z": "8599581f0e8197ce",
        "name": "",
        "statusCode": "429",
        "headers": {},
        "x": 608.8888888888889,
        "y": 160,
        "wires": []
    },
    {
        "id": "dfc2a43df4970d8f",
        "type": "comment",
        "z": "5c83f8765f29479f",
        "name": "Get scrap history based on user id",
        "info": "",
        "x": 200,
        "y": 60,
        "wires": []
    },
    {
        "id": "23c753c8f17d9759",
        "type": "debug",
        "z": "5c83f8765f29479f",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 220,
        "wires": []
    },
    {
        "id": "443b8e4045390438",
        "type": "function",
        "z": "5c83f8765f29479f",
        "name": "function 6",
        "func": "let id = msg.req.params.id;\nlet scrapTime = msg.payload.scrapTime;\nlet line = msg.payload.line;\nlet asset = msg.payload.asset;\nlet shift = msg.payload.shift;\nlet sku = msg.payload.sku;\nlet scrapCode = msg.payload.scrapCode;\nlet scrapCode_text = msg.payload.scrapCode_text;\nlet comment = msg.payload.comment;\n\nmsg.topic = 'SELECT * FROM litmus.dbo.incident_user WHERE id = @id';\n\nmsg.payload = [\n    {\n    \"name\": \"id\",\n    \"value\": id,\n    \"type\": \"VarChar\"\n},\n    {\n\n    }];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 160,
        "wires": [
            [
                "cffe2fb97d73f00c",
                "a17b4cd3eefb6725"
            ]
        ]
    },
    {
        "id": "cffe2fb97d73f00c",
        "type": "MSSQL",
        "z": "5c83f8765f29479f",
        "mssqlCN": "3a108e85f3c6ac98",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "topic",
        "queryOptType": "msg",
        "paramsOpt": "payload",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": false,
        "params": [],
        "x": 900,
        "y": 160,
        "wires": [
            [
                "23c753c8f17d9759",
                "fd61353cb12c6c31"
            ]
        ]
    },
    {
        "id": "a17b4cd3eefb6725",
        "type": "debug",
        "z": "5c83f8765f29479f",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 220,
        "wires": []
    },
    {
        "id": "1f32b1806a25fc78",
        "type": "http in",
        "z": "5c83f8765f29479f",
        "name": "",
        "url": "/scrapHistory",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "b575dd672afa96f5"
            ]
        ]
    },
    {
        "id": "fd61353cb12c6c31",
        "type": "http response",
        "z": "5c83f8765f29479f",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1100,
        "y": 160,
        "wires": []
    },
    {
        "id": "c78b7d47da5d8c2b",
        "type": "inject",
        "z": "5c83f8765f29479f",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "b575dd672afa96f5"
            ]
        ]
    },
    {
        "id": "b575dd672afa96f5",
        "type": "rate-limiter",
        "z": "5c83f8765f29479f",
        "delay_action": "ratelimit",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "drop_select": "drop",
        "addcurrentcount": false,
        "name": "",
        "outputs": "2",
        "buffer_size": "0",
        "buffer_drop": "buffer_drop_new",
        "emit_msg_2nd": true,
        "control_topic": "",
        "version": 0.0018,
        "x": 400,
        "y": 160,
        "wires": [
            [
                "443b8e4045390438"
            ],
            [
                "9ae53f6290aa27fd"
            ]
        ]
    },
    {
        "id": "9ae53f6290aa27fd",
        "type": "http response",
        "z": "5c83f8765f29479f",
        "name": "",
        "statusCode": "429",
        "headers": {},
        "x": 340,
        "y": 240,
        "wires": []
    },
    {
        "id": "948736f5d6b8b4d5",
        "type": "inject",
        "z": "40dc11812e2f50cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"startDate\":\"2024-02-16\",\"endDate\":\"2024-02-16\"}",
        "payloadType": "json",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "13aab7a688bd9865"
            ]
        ]
    },
    {
        "id": "960df8f164e33d4e",
        "type": "debug",
        "z": "40dc11812e2f50cf",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 300,
        "wires": []
    },
    {
        "id": "1375e0f0355055a4",
        "type": "function",
        "z": "40dc11812e2f50cf",
        "name": "function 7",
        "func": "let startDate = msg.payload.startDate;\nlet endDate = msg.payload.endDate;\n\nmsg.topic = 'SELECT TOP 1000 * FROM litmus.dbo.downtimeHistory WHERE CAST(startTime AS DATE) BETWEEN @startDate AND @endDate';\n\nmsg.payload = [\n    { name: 'startDate', type: 'VarChar', value: startDate },\n    { name: 'endDate', type: 'VarChar', value: endDate }\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "98057de77ed16e04",
                "28bd29016a5b4686"
            ]
        ]
    },
    {
        "id": "98057de77ed16e04",
        "type": "MSSQL",
        "z": "40dc11812e2f50cf",
        "mssqlCN": "3a108e85f3c6ac98",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "topic",
        "queryOptType": "msg",
        "paramsOpt": "payload",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": false,
        "params": [],
        "x": 520,
        "y": 300,
        "wires": [
            [
                "960df8f164e33d4e",
                "ac483d34c67e2020"
            ]
        ]
    },
    {
        "id": "28bd29016a5b4686",
        "type": "debug",
        "z": "40dc11812e2f50cf",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 380,
        "wires": []
    },
    {
        "id": "c703665f7f407701",
        "type": "http in",
        "z": "40dc11812e2f50cf",
        "name": "",
        "url": "/downtimeHistory/Date",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 180,
        "wires": [
            [
                "13aab7a688bd9865"
            ]
        ]
    },
    {
        "id": "ac483d34c67e2020",
        "type": "http response",
        "z": "40dc11812e2f50cf",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 700,
        "y": 220,
        "wires": []
    },
    {
        "id": "049bb4bfd0390a9e",
        "type": "comment",
        "z": "40dc11812e2f50cf",
        "name": "Get Downtime History by Date",
        "info": "",
        "x": 180,
        "y": 60,
        "wires": []
    },
    {
        "id": "0f703ff7bc9aac93",
        "type": "http response",
        "z": "40dc11812e2f50cf",
        "name": "",
        "statusCode": "429",
        "headers": {},
        "x": 680,
        "y": 100,
        "wires": []
    },
    {
        "id": "13aab7a688bd9865",
        "type": "rate-limiter",
        "z": "40dc11812e2f50cf",
        "delay_action": "ratelimit",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "drop_select": "drop",
        "addcurrentcount": false,
        "name": "",
        "outputs": "2",
        "buffer_size": "0",
        "buffer_drop": "buffer_drop_new",
        "emit_msg_2nd": true,
        "control_topic": "",
        "version": 0.0018,
        "x": 451.1111111111111,
        "y": 180,
        "wires": [
            [
                "1375e0f0355055a4"
            ],
            [
                "0f703ff7bc9aac93"
            ]
        ]
    },
    {
        "id": "37688d64a572fe3e",
        "type": "template",
        "z": "40dc11812e2f50cf",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 760,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "e8a0ed6e3cc4b382",
        "type": "e-mail",
        "z": "40dc11812e2f50cf",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "yuanzhenyeoh@gmail.com",
        "dname": "Sebastian Yeoh",
        "x": 940,
        "y": 400,
        "wires": []
    },
    {
        "id": "65e36494996e4e9d",
        "type": "inject",
        "z": "d51c145170155018",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"id\":\"1\",\"username\":\"yz\",\"firstname\":\"Sebastian\",\"lastname\":\"tan\",\"email\":\"tctan@gmail.com\",\"mobile\":\"0184810228\",\"telegramID\":\"123456789\",\"team\":\"{T001}\"}",
        "payloadType": "json",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "d449c05723a8dbf5"
            ]
        ]
    },
    {
        "id": "c60e2b01596fb797",
        "type": "debug",
        "z": "d51c145170155018",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 360,
        "wires": []
    },
    {
        "id": "a39350619f4f2b9c",
        "type": "function",
        "z": "d51c145170155018",
        "name": "Data insertion",
        "func": "if (!msg.duplicateFound){\n    msg.topic = 'INSERT INTO litmus.dbo.incident_user (id, username, firstname, lastname, email, mobile, telegramID, team) VALUES (@id, @username, @firstname, @lastname, @email, @mobile, @telegramID, @team)';\n    msg.payload = [\n        { name: 'id', type: 'VarChar', value: msg.payload.id },\n        { name: 'username', type: 'VarChar', value: msg.payload.username },\n        { name: 'firstname', type: 'VarChar', value: msg.payload.firstname },\n        { name: 'lastname', type: 'VarChar', value: msg.payload.lastname },\n        { name: 'email', type: 'VarChar', value: msg.payload.email },\n        { name: 'mobile', type: 'VarChar', value: msg.payload.mobile },\n        { name: 'telegramID', type: 'VarChar', value: msg.payload.telegramID },\n        { name: 'team', type: 'VarChar', value: msg.payload.team }\n    ];\n} else {\n    msg.topic = 'INSERT INTO litmus.dbo.incident_user (id, username, firstname, lastname, email, mobile, telegramID, team) VALUES (NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)';\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 393.33333333333337,
        "y": 320,
        "wires": [
            [
                "17141778da9eb3e0",
                "3a612ff78f8ffd58"
            ]
        ]
    },
    {
        "id": "17141778da9eb3e0",
        "type": "MSSQL",
        "z": "d51c145170155018",
        "mssqlCN": "99aa93fffde390a2",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "topic",
        "queryOptType": "msg",
        "paramsOpt": "payload",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": false,
        "params": [],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "c60e2b01596fb797",
                "4cbb3363ec45599e"
            ]
        ]
    },
    {
        "id": "3a612ff78f8ffd58",
        "type": "debug",
        "z": "d51c145170155018",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 420,
        "wires": []
    },
    {
        "id": "dd5083fb0c53bce9",
        "type": "http in",
        "z": "d51c145170155018",
        "name": "",
        "url": "/incidentTeam",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "d449c05723a8dbf5"
            ]
        ]
    },
    {
        "id": "4cbb3363ec45599e",
        "type": "http response",
        "z": "d51c145170155018",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1100,
        "y": 280,
        "wires": []
    },
    {
        "id": "01c36b13677cd0a7",
        "type": "comment",
        "z": "d51c145170155018",
        "name": "Add new incident response team",
        "info": "",
        "x": 190,
        "y": 60,
        "wires": []
    },
    {
        "id": "bc92896523fae652",
        "type": "function",
        "z": "d51c145170155018",
        "name": "Duplication checker",
        "func": "msg.topic = 'SELECT COUNT(*) AS count FROM litmus.dbo.incident_user WHERE id = @id AND username = @username';\nmsg.params = [\n    { name: 'id', type: 'VarChar', value: msg.payload.id },\n    { name: 'username', type: 'VarChar', value: msg.payload.username }\n];\n\nmsg.originalPayload = msg.payload;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 467.7777777777778,
        "y": 240,
        "wires": [
            [
                "8a00b331b59ff507",
                "c44ad62c2535c1b1"
            ]
        ]
    },
    {
        "id": "4d40e03758c4c8c4",
        "type": "function",
        "z": "d51c145170155018",
        "name": "Result handling",
        "func": "if (msg.payload && msg.payload[0].count > 0){\n    node.error(\"Duplicate entry found for username.\");\n    return null;\n} else {\n    msg.payload = msg.originalPayload;\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 240,
        "wires": [
            [
                "31cef844bd95dd00",
                "a39350619f4f2b9c"
            ]
        ]
    },
    {
        "id": "31cef844bd95dd00",
        "type": "debug",
        "z": "d51c145170155018",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 180,
        "wires": []
    },
    {
        "id": "c44ad62c2535c1b1",
        "type": "MSSQL",
        "z": "d51c145170155018",
        "mssqlCN": "99aa93fffde390a2",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "topic",
        "queryOptType": "msg",
        "paramsOpt": "params",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": false,
        "params": [],
        "x": 680,
        "y": 240,
        "wires": [
            [
                "4d40e03758c4c8c4"
            ]
        ]
    },
    {
        "id": "8a00b331b59ff507",
        "type": "debug",
        "z": "d51c145170155018",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 160,
        "wires": []
    },
    {
        "id": "d449c05723a8dbf5",
        "type": "rate-limiter",
        "z": "d51c145170155018",
        "delay_action": "ratelimit",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "drop_select": "drop",
        "addcurrentcount": false,
        "name": "",
        "outputs": "2",
        "buffer_size": "0",
        "buffer_drop": "buffer_drop_new",
        "emit_msg_2nd": true,
        "control_topic": "",
        "version": 0.0018,
        "x": 340,
        "y": 180,
        "wires": [
            [
                "bc92896523fae652"
            ],
            [
                "ef061b1c45be61d9"
            ]
        ]
    },
    {
        "id": "ef061b1c45be61d9",
        "type": "http response",
        "z": "d51c145170155018",
        "name": "",
        "statusCode": "429",
        "headers": {},
        "x": 600,
        "y": 80,
        "wires": []
    },
    {
        "id": "45a42f96b2adcf1b",
        "type": "template",
        "z": "eac46d969b6a844c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 560,
        "y": 200,
        "wires": [
            [
                "dba48609cf146586",
                "5bab59da022da185"
            ]
        ]
    },
    {
        "id": "7fc7a9582e9ad84b",
        "type": "inject",
        "z": "eac46d969b6a844c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "First Testing",
        "payload": "This is a test message",
        "payloadType": "str",
        "x": 340,
        "y": 260,
        "wires": [
            [
                "45a42f96b2adcf1b"
            ]
        ]
    },
    {
        "id": "dba48609cf146586",
        "type": "debug",
        "z": "eac46d969b6a844c",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 200,
        "wires": []
    },
    {
        "id": "0caeb1a652ee14c9",
        "type": "http in",
        "z": "eac46d969b6a844c",
        "name": "",
        "url": "/testing",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 350,
        "y": 160,
        "wires": [
            [
                "45a42f96b2adcf1b"
            ]
        ]
    },
    {
        "id": "5bab59da022da185",
        "type": "http response",
        "z": "eac46d969b6a844c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 260,
        "wires": []
    },
    {
        "id": "d280e90027e1e020",
        "type": "comment",
        "z": "eac46d969b6a844c",
        "name": "Test",
        "info": "",
        "x": 90,
        "y": 40,
        "wires": []
    },
    {
        "id": "f510be3658d193fa",
        "type": "comment",
        "z": "07faf086ce88aab0",
        "name": "Count downtime instance for Machine 1 for every hour",
        "info": "",
        "x": 260,
        "y": 60,
        "wires": []
    },
    {
        "id": "5cab23cdf12c2a93",
        "type": "e-mail",
        "z": "07faf086ce88aab0",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "tp068144@mail.apu.edu.my",
        "dname": "",
        "x": 920,
        "y": 280,
        "wires": []
    },
    {
        "id": "ecc2c12d92f47633",
        "type": "inject",
        "z": "07faf086ce88aab0",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Machine 1 Downtime alert!",
        "payload": "Test content",
        "payloadType": "str",
        "x": 210,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "bd1ab2e72de588b8",
        "type": "MSSQL",
        "z": "07faf086ce88aab0",
        "mssqlCN": "3a108e85f3c6ac98",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT \r\n  COUNT(*) AS TotalDowntimeInstances\r\nFROM \r\n  litmus.dbo.downtimeHistory\r\nWHERE \r\n  asset = 'Machine 1' AND\r\n  startTime >= DATEADD(hour, DATEDIFF(hour, 0, GETDATE()) - 1, 0) AND\r\n  startTime < DATEADD(hour, DATEDIFF(hour, 0, GETDATE()), 0)\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "payload",
        "queryOptType": "editor",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 440,
        "y": 240,
        "wires": [
            [
                "2411cb6ddca2146b",
                "a52e7a26b6e6a155"
            ]
        ]
    },
    {
        "id": "2411cb6ddca2146b",
        "type": "debug",
        "z": "07faf086ce88aab0",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 180,
        "wires": []
    },
    {
        "id": "401f99531d970dd4",
        "type": "inject",
        "z": "07faf086ce88aab0",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "bd1ab2e72de588b8"
            ]
        ]
    },
    {
        "id": "853412668905b14b",
        "type": "template",
        "z": "07faf086ce88aab0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 460,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a52e7a26b6e6a155",
        "type": "function",
        "z": "07faf086ce88aab0",
        "name": "function 10",
        "func": "// Example function to set email subject and body\nmsg.topic = \"Downtime Report for Machine 1\"; // This will be the email subject\nmsg.payload = \"Total downtime instances in the last hour: \" + msg.payload[0].TotalDowntimeInstances; // Assuming msg.payload contains the downtime instances count\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 280,
        "wires": [
            [
                "5cab23cdf12c2a93"
            ]
        ]
    },
    {
        "id": "c9f7b011dccb3383",
        "type": "comment",
        "z": "a215c175be6747f4",
        "name": "Create new account",
        "info": "",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "de8ddd6de7d7fb6d",
        "type": "function",
        "z": "a215c175be6747f4",
        "name": "Password Hashing",
        "func": "const bcrypt = global.get('bcrypt'); // assuming bcrypt is in global context\nconst saltRounds = 10;\n\nbcrypt.hash(msg.payload.password, saltRounds, function(err, hash) {\n    if (err) {\n        node.error('Error hashing password', err);\n        msg.payload = { error: \"Error hashing password\" };\n        return msg; // We can handle the error in the flow if needed\n    } else {\n        msg.payload = {\n            username: msg.payload.username,\n            password: hash\n        };\n        node.send(msg); // Continue with the flow to the next node\n    }\n});\n// Since bcrypt is asynchronous, we use node.send to handle the next steps of the flow\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 260,
        "wires": [
            [
                "bb32b8c03e951b37"
            ]
        ]
    },
    {
        "id": "da34d3ecbfa032eb",
        "type": "debug",
        "z": "a215c175be6747f4",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 260,
        "wires": []
    },
    {
        "id": "eb8f2b7a1e3b778b",
        "type": "http in",
        "z": "a215c175be6747f4",
        "name": "",
        "url": "/createUser",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "de8ddd6de7d7fb6d"
            ]
        ]
    },
    {
        "id": "82f42f962ce81839",
        "type": "MSSQL",
        "z": "a215c175be6747f4",
        "mssqlCN": "99aa93fffde390a2",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "INSERT INTO litmus.dbo.api_user (username, password) VALUES (@username, @password)\r\n",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "topic",
        "queryOptType": "msg",
        "paramsOpt": "params",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 700,
        "y": 260,
        "wires": [
            [
                "da34d3ecbfa032eb",
                "fc8b5f9581964c81"
            ]
        ]
    },
    {
        "id": "bb32b8c03e951b37",
        "type": "function",
        "z": "a215c175be6747f4",
        "name": "query",
        "func": "msg.topic = 'INSERT INTO litmus.dbo.api_user (username, password) VALUES (@username, @password)';\nmsg.params = [\n    { name: 'Username', type: 'Varchar', value: msg.payload.username},\n    { name: 'Password', type: 'Varchar', value: msg.payload.password}\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 260,
        "wires": [
            [
                "82f42f962ce81839"
            ]
        ]
    },
    {
        "id": "fc8b5f9581964c81",
        "type": "http response",
        "z": "a215c175be6747f4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 200,
        "wires": []
    },
    {
        "id": "34f34f8c9792994d",
        "type": "http in",
        "z": "aba326dbe5621f19",
        "name": "",
        "url": "/litmusGeneral",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "94473a3f45d7658e"
            ]
        ]
    },
    {
        "id": "b69e245bb8b7879f",
        "type": "comment",
        "z": "aba326dbe5621f19",
        "name": "Generic endpoint (Main)",
        "info": "",
        "x": 160,
        "y": 80,
        "wires": []
    },
    {
        "id": "c8dfca2f4c270630",
        "type": "http response",
        "z": "aba326dbe5621f19",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 920,
        "y": 380,
        "wires": []
    },
    {
        "id": "c1ed282b5045c7fb",
        "type": "debug",
        "z": "aba326dbe5621f19",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 460,
        "wires": []
    },
    {
        "id": "5d2aea17334fed6a",
        "type": "MSSQL",
        "z": "aba326dbe5621f19",
        "mssqlCN": "99aa93fffde390a2",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "query2",
        "queryOptType": "msg",
        "paramsOpt": "params",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 700,
        "y": 420,
        "wires": [
            [
                "c1ed282b5045c7fb",
                "c8dfca2f4c270630"
            ]
        ]
    },
    {
        "id": "7c2f1f70c3e9d215",
        "type": "debug",
        "z": "aba326dbe5621f19",
        "name": "debug 30",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 300,
        "wires": []
    },
    {
        "id": "e3526f78e93eeb5b",
        "type": "rate-limiter",
        "z": "aba326dbe5621f19",
        "delay_action": "ratelimit",
        "rate": "12",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "drop_select": "drop",
        "addcurrentcount": false,
        "name": "",
        "outputs": "2",
        "buffer_size": "0",
        "buffer_drop": "buffer_drop_new",
        "emit_msg_2nd": true,
        "control_topic": "",
        "version": 0.0018,
        "x": 240,
        "y": 320,
        "wires": [
            [
                "e7cb369b21ab7e6c"
            ],
            [
                "4d1801ab7840c3fc",
                "e00a1249544679b1"
            ]
        ]
    },
    {
        "id": "29acc902adb36e7d",
        "type": "debug",
        "z": "aba326dbe5621f19",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 60,
        "wires": []
    },
    {
        "id": "94473a3f45d7658e",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Decode Auth header",
        "func": "if (msg.req.headers.authorization) {\n    const encodedCredentials = msg.req.headers.authorization.split(' ')[1];\n    const decodedCredentials = Buffer.from(encodedCredentials, 'base64').toString('ascii');\n    const [username, password] = decodedCredentials.split(':');\n    msg.credentials = { username, password };\n    return msg; // Pass the credentials to the next node for verification\n} else {\n    // No credentials provided\n    msg.statusCode = 401;\n    msg.headers = { \"WWW-Authenticate\": 'Basic realm=\"Node-RED\"' };\n    msg.credentials = \"Authentication required\";\n    return [null, msg]; // Stop the flow and respond with a 401 Unauthorized\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            [
                "659f7ce486b2a840"
            ]
        ]
    },
    {
        "id": "270dd568d9568043",
        "type": "debug",
        "z": "aba326dbe5621f19",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 300,
        "wires": []
    },
    {
        "id": "9463d0385db06f16",
        "type": "MSSQL",
        "z": "aba326dbe5621f19",
        "mssqlCN": "99aa93fffde390a2",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT PasswordHash FROM litmus.dbo.api_user WHERE Username = @username",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "query",
        "queryOptType": "msg",
        "paramsOpt": "params",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 700,
        "y": 200,
        "wires": [
            [
                "7c2f1f70c3e9d215",
                "0fc237117f45f542"
            ]
        ]
    },
    {
        "id": "628599d4dcf83dd8",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Credentials Verification",
        "func": "const bcrypt = global.get('bcrypt');\n// Assuming the hashed password is retrieved and stored in msg.payload[0].PasswordHash\n// and the plaintext password provided by the user is in msg.payload.password\n\n// Ensure you're accessing the hashedPassword correctly based on the actual structure of msg.payload\nconst hashedPassword = msg.database.hashedPassword;  // Or msg.payload.PasswordHash if not an array\nconst plaintextPassword = msg.credentials.password;  // The plaintext password from the auth header\n\nbcrypt.compare(plaintextPassword, hashedPassword, function (err, result) {\n    if (err) {\n        // Handle error\n        node.error('Error comparing passwords', err);\n        msg.statusCode = 500;\n        msg.payload = \"Internal server error.\";\n        node.send([null, msg]); // Stop the flow and respond with an error\n    } else if (result) {\n        // Passwords match\n        msg.statusCode = 200;\n        msg.payload = \"Authentication successful.\";\n        node.send([msg, null]); // Continue the flow (if there's more to do) or respond\n    } else {\n        // Passwords do not match\n        msg.statusCode = 401;\n        msg.payload = \"Invalid credentials.\";\n        node.send([null, msg]); // Stop the flow and respond with an error\n    }\n\ndelete msg.topic;\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 200,
        "wires": [
            [
                "25a8d28def4b5d51",
                "e3526f78e93eeb5b"
            ]
        ]
    },
    {
        "id": "0fc237117f45f542",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Retrieved hashed password",
        "func": "// After the MSSQL node\nmsg.database = { hashedPassword: msg.payload[0].password };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 120,
        "wires": [
            [
                "628599d4dcf83dd8"
            ]
        ]
    },
    {
        "id": "25a8d28def4b5d51",
        "type": "debug",
        "z": "aba326dbe5621f19",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 120,
        "wires": []
    },
    {
        "id": "e7cb369b21ab7e6c",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Main function",
        "func": "const requestBody = msg.payload;\nconst calledMethod = msg.method;\nlet tableName = \"\";\nconst DEFAULT_COUNT = 10;\nconst {\n    method,\n    count = DEFAULT_COUNT\n} = requestBody;\n\nswitch (calledMethod) {\n    case \"anomalyHistory\":\n        tableName = \"litmus.dbo.anomalyHistory\";\n        break;  // Prevent fall-through with a break statement\n    case \"avi17\":\n        tableName = \"litmus.dbo.avi17\";\n        break;  // Prevent fall-through with a break statement\n    case \"avi1718\":\n        tableName = \"litmus.dbo.avi1718\";\n        break;  // Prevent fall-through with a break statement\n    case \"avi999\":\n        tableName = \"litmus.dbo.avi999\";\n        break;  // Prevent fall-through with a break statement\n    case \"downtimeHistory\":\n        tableName = \"litmus.dbo.downtimeHistory\";\n        break;  // Prevent fall-through with a break statement\n    case \"enigparam\":\n        tableName = \"litmus.dbo.enigparam\";\n        break;  // Prevent fall-through with a break statement\n    case \"filedrop\":\n        tableName = \"litmus.dbo.filedrop\";\n        break;  // Prevent fall-through with a break statement\n    case \"incident\":\n        tableName = \"litmus.dbo.incident\";\n        break;  // Prevent fall-through with a break statement\n    case \"incidentMonitor\":\n        tableName = \"litmus.dbo.incident_monitor\";\n        break;  // Prevent fall-through with a break statement\n    case \"incidentSop\":\n        tableName = \"litmus.dbo.incident_sop\";\n        break;  // Prevent fall-through with a break statement\n    case \"incidentTeam\":\n        tableName = \"litmus.dbo.incident_team\";\n        break;  // Prevent fall-through with a break statement\n    case \"incidentUser\":\n        tableName = \"litmus.dbo.incident_user\";\n        break;  // Prevent fall-through with a break statement\n    case \"jimiiotDevices\":\n        tableName = \"litmus.dbo.jimiiotDevices\";\n        break;  // Prevent fall-through with a break statement\n    case \"MLTrain\":\n        tableName = \"litmus.dbo.MLTrain\";\n        break;  // Prevent fall-through with a break statement\n    case \"modelFeature\":\n        tableName = \"litmus.dbo.modelfeature\";\n        break;  // Prevent fall-through with a break statement\n    case \"pcb_enig\":\n        tableName = \"litmus.dbo.pcb_enig\";\n        break;  // Prevent fall-through with a break statement\n    case \"pcb_thickness\":\n        tableName = \"litmus.dbo.pcb_thickness\";\n        break;  // Prevent fall-through with a break statement\n    case \"reasonCodes\":\n        tableName = \"litmus.dbo.reasonCodes\";\n        break;  // Prevent fall-through with a break statement\n    case \"scrapCodes\":\n        tableName = \"litmus.dbo.scrapCodes\";\n        break;  // Prevent fall-through with a break statement\n    case \"scrapHistory\":\n        tableName = \"litmus.dbo.scrapHistory\";\n        break;  // Prevent fall-through with a break statement\n    case \"spc\":\n        tableName = \"litmus.dbo.spc\";\n        break;  // Prevent fall-through with a break statement\n    case \"trackAsset\":\n        tableName = \"litmus.dbo.track_asset\";\n        break;  // Prevent fall-through with a break statement\n    default:\n        // Handle unknown method\n        msg.payload = {\n            error: true,\n            message: \"Invalid 'method' specified in the request.\"\n        };\n        msg.statusCode = 400; // Bad Request HTTP status code\n        return msg; // Stop execution and return error message\n}\n\nmsg.query2 = `SELECT TOP ${count} * FROM ${tableName}`;\n\n// If dateFrom and dateTo are provided and applicable, add a WHERE clause\n/*if (dateFrom && dateTo) {\n    // You should also ensure that dateFrom and dateTo are in the correct format\n    // and sanitized to prevent SQL injection\n    sqlQuery += ` WHERE Date BETWEEN '${dateFrom}' AND '${dateTo}' `;\n}*/\n\n// Continue with the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 360,
        "wires": [
            [
                "270dd568d9568043",
                "5d2aea17334fed6a"
            ]
        ]
    },
    {
        "id": "e00a1249544679b1",
        "type": "debug",
        "z": "aba326dbe5621f19",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 540,
        "wires": []
    },
    {
        "id": "4d1801ab7840c3fc",
        "type": "http response",
        "z": "aba326dbe5621f19",
        "name": "",
        "statusCode": "401",
        "headers": {},
        "x": 660,
        "y": 480,
        "wires": []
    },
    {
        "id": "659f7ce486b2a840",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Retrieve user credentials",
        "func": "msg.method = msg.payload.method;\nmsg.query = `SELECT password FROM litmus.dbo.api_user WHERE username = @username`;\nmsg.params = [\n    { name: 'username', type: 'VarChar', value: msg.credentials.username }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 120,
        "wires": [
            [
                "29acc902adb36e7d",
                "9463d0385db06f16"
            ]
        ]
    },
    {
        "id": "82a9754dfae5081f",
        "type": "http response",
        "z": "83c3ec36bf6fe84f",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 960,
        "y": 300,
        "wires": []
    },
    {
        "id": "08ed949e3f2fed79",
        "type": "debug",
        "z": "83c3ec36bf6fe84f",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 380,
        "wires": []
    },
    {
        "id": "b7f6526d44887857",
        "type": "MSSQL",
        "z": "83c3ec36bf6fe84f",
        "mssqlCN": "99aa93fffde390a2",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "topic",
        "queryOptType": "msg",
        "paramsOpt": "params",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 720,
        "y": 340,
        "wires": [
            [
                "08ed949e3f2fed79",
                "82a9754dfae5081f"
            ]
        ]
    },
    {
        "id": "df70bfa866b223e6",
        "type": "debug",
        "z": "83c3ec36bf6fe84f",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 220,
        "wires": []
    },
    {
        "id": "bce543bb8f2d2b06",
        "type": "rate-limiter",
        "z": "83c3ec36bf6fe84f",
        "delay_action": "ratelimit",
        "rate": "12",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "drop_select": "drop",
        "addcurrentcount": false,
        "name": "",
        "outputs": "2",
        "buffer_size": "0",
        "buffer_drop": "buffer_drop_new",
        "emit_msg_2nd": true,
        "control_topic": "",
        "version": 0.0018,
        "x": 280,
        "y": 240,
        "wires": [
            [
                "f6fdf6371a7c1a23"
            ],
            [
                "9fa131a0d2938d99",
                "cca9bbbddb54aaa1"
            ]
        ]
    },
    {
        "id": "69acf90f4aaaf214",
        "type": "debug",
        "z": "83c3ec36bf6fe84f",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 200,
        "wires": []
    },
    {
        "id": "f6fdf6371a7c1a23",
        "type": "function",
        "z": "83c3ec36bf6fe84f",
        "name": "Main function",
        "func": "const requestBody = msg.payload;\nlet tableName = \"\";\nconst DEFAULT_COUNT = 10;\nconst {\n    method,\n    count = DEFAULT_COUNT\n} = requestBody;\n\nswitch (method) {\n    case \"anomalyHistory\":\n        tableName = \"litmus.dbo.anomalyHistory\";\n        break;  // Prevent fall-through with a break statement\n    case \"avi17\":\n        tableName = \"litmus.dbo.avi17\";\n        break;  // Prevent fall-through with a break statement\n    case \"avi1718\":\n        tableName = \"litmus.dbo.avi1718\";\n        break;  // Prevent fall-through with a break statement\n    case \"avi999\":\n        tableName = \"litmus.dbo.avi999\";\n        break;  // Prevent fall-through with a break statement\n    case \"downtimeHistory\":\n        tableName = \"litmus.dbo.downtimeHistory\";\n        break;  // Prevent fall-through with a break statement\n    case \"enigparam\":\n        tableName = \"litmus.dbo.enigparam\";\n        break;  // Prevent fall-through with a break statement\n    case \"filedrop\":\n        tableName = \"litmus.dbo.filedrop\";\n        break;  // Prevent fall-through with a break statement\n    case \"incident\":\n        tableName = \"litmus.dbo.incident\";\n        break;  // Prevent fall-through with a break statement\n    case \"incidentMonitor\":\n        tableName = \"litmus.dbo.incident_monitor\";\n        break;  // Prevent fall-through with a break statement\n    case \"incidentSop\":\n        tableName = \"litmus.dbo.incident_sop\";\n        break;  // Prevent fall-through with a break statement\n    case \"incidentTeam\":\n        tableName = \"litmus.dbo.incident_team\";\n        break;  // Prevent fall-through with a break statement\n    case \"incidentUser\":\n        tableName = \"litmus.dbo.incident_user\";\n        break;  // Prevent fall-through with a break statement\n    case \"jimiiotDevices\":\n        tableName = \"litmus.dbo.jimiiotDevices\";\n        break;  // Prevent fall-through with a break statement\n    case \"MLTrain\":\n        tableName = \"litmus.dbo.MLTrain\";\n        break;  // Prevent fall-through with a break statement\n    case \"modelFeature\":\n        tableName = \"litmus.dbo.modelfeature\";\n        break;  // Prevent fall-through with a break statement\n    case \"pcb_enig\":\n        tableName = \"litmus.dbo.pcb_enig\";\n        break;  // Prevent fall-through with a break statement\n    case \"pcb_thickness\":\n        tableName = \"litmus.dbo.pcb_thickness\";\n        break;  // Prevent fall-through with a break statement\n    case \"reasonCodes\":\n        tableName = \"litmus.dbo.reasonCodes\";\n        break;  // Prevent fall-through with a break statement\n    case \"scrapCodes\":\n        tableName = \"litmus.dbo.scrapCodes\";\n        break;  // Prevent fall-through with a break statement\n    case \"scrapHistory\":\n        tableName = \"litmus.dbo.scrapHistory\";\n        break;  // Prevent fall-through with a break statement\n    case \"spc\":\n        tableName = \"litmus.dbo.spc\";\n        break;  // Prevent fall-through with a break statement\n    case \"trackAsset\":\n        tableName = \"litmus.dbo.track_asset\";\n        break;  // Prevent fall-through with a break statement\n    default:\n        // Handle unknown method\n        msg.payload = {\n            error: true,\n            message: \"Invalid 'method' specified in the request.\"\n        };\n        msg.statusCode = 400; // Bad Request HTTP status code\n        return msg; // Stop execution and return error message\n}\n\nmsg.topic = `SELECT TOP ${count} * FROM ${tableName}`;\n\n// If dateFrom and dateTo are provided and applicable, add a WHERE clause\n/*if (dateFrom && dateTo) {\n    // You should also ensure that dateFrom and dateTo are in the correct format\n    // and sanitized to prevent SQL injection\n    sqlQuery += ` WHERE Date BETWEEN '${dateFrom}' AND '${dateTo}' `;\n}*/\n\n// Continue with the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 280,
        "wires": [
            [
                "69acf90f4aaaf214",
                "b7f6526d44887857",
                "df70bfa866b223e6"
            ]
        ]
    },
    {
        "id": "cca9bbbddb54aaa1",
        "type": "debug",
        "z": "83c3ec36bf6fe84f",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 460,
        "wires": []
    },
    {
        "id": "9fa131a0d2938d99",
        "type": "http response",
        "z": "83c3ec36bf6fe84f",
        "name": "",
        "statusCode": "401",
        "headers": {},
        "x": 720,
        "y": 400,
        "wires": []
    },
    {
        "id": "8b51d6f37041e88a",
        "type": "http in",
        "z": "83c3ec36bf6fe84f",
        "name": "",
        "url": "/litmusTest",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "bce543bb8f2d2b06"
            ]
        ]
    },
    {
        "id": "b7ee72f2c446bd1a",
        "type": "comment",
        "z": "83c3ec36bf6fe84f",
        "name": "Generic endpoint (Test)",
        "info": "",
        "x": 120,
        "y": 80,
        "wires": []
    }
]