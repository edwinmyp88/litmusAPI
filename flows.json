[
    {
        "id": "aba326dbe5621f19",
        "type": "tab",
        "label": "Flow 9",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "34f34f8c9792994d",
        "type": "http in",
        "z": "aba326dbe5621f19",
        "name": "",
        "url": "/api/litmusData",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "b06b08ad0c5219fd",
                "eb230fddeb5cba56"
            ]
        ]
    },
    {
        "id": "b69e245bb8b7879f",
        "type": "comment",
        "z": "aba326dbe5621f19",
        "name": "Generic endpoint (Payload Basic Auth)",
        "info": "",
        "x": 190,
        "y": 60,
        "wires": []
    },
    {
        "id": "c8dfca2f4c270630",
        "type": "http response",
        "z": "aba326dbe5621f19",
        "name": "OK",
        "statusCode": "200",
        "headers": {},
        "x": 1030,
        "y": 480,
        "wires": []
    },
    {
        "id": "5d2aea17334fed6a",
        "type": "MSSQL",
        "z": "aba326dbe5621f19",
        "mssqlCN": "99aa93fffde390a2",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "topic",
        "queryOptType": "msg",
        "paramsOpt": "payload",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 880,
        "y": 460,
        "wires": [
            [
                "58f67c0df0ba7e81",
                "c8dfca2f4c270630"
            ]
        ]
    },
    {
        "id": "7c2f1f70c3e9d215",
        "type": "debug",
        "z": "aba326dbe5621f19",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 280,
        "wires": []
    },
    {
        "id": "e3526f78e93eeb5b",
        "type": "rate-limiter",
        "z": "aba326dbe5621f19",
        "delay_action": "ratelimit",
        "rate": "12",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "drop_select": "drop",
        "addcurrentcount": false,
        "name": "",
        "outputs": "2",
        "buffer_size": "0",
        "buffer_drop": "buffer_drop_new",
        "emit_msg_2nd": true,
        "control_topic": "",
        "version": 0.0018,
        "x": 160,
        "y": 420,
        "wires": [
            [
                "a21dd7501b53d7d5"
            ],
            [
                "16da9591dcfc40dd"
            ]
        ]
    },
    {
        "id": "29acc902adb36e7d",
        "type": "debug",
        "z": "aba326dbe5621f19",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 280,
        "wires": []
    },
    {
        "id": "9463d0385db06f16",
        "type": "MSSQL",
        "z": "aba326dbe5621f19",
        "mssqlCN": "99aa93fffde390a2",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "SELECT PasswordHash FROM litmus.dbo.api_user WHERE Username = @username",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "topic",
        "queryOptType": "msg",
        "paramsOpt": "parameters",
        "paramsOptType": "msg",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 660,
        "y": 320,
        "wires": [
            [
                "7c2f1f70c3e9d215",
                "f13e006034c969e9"
            ]
        ]
    },
    {
        "id": "25a8d28def4b5d51",
        "type": "debug",
        "z": "aba326dbe5621f19",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 380,
        "wires": []
    },
    {
        "id": "4d1801ab7840c3fc",
        "type": "http response",
        "z": "aba326dbe5621f19",
        "name": "Unauthorized",
        "statusCode": "401",
        "headers": {},
        "x": 1690,
        "y": 120,
        "wires": []
    },
    {
        "id": "659f7ce486b2a840",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Retrieve user credentials",
        "func": "msg.method = msg.payload.method;\nmsg.query = `SELECT password FROM litmus.dbo.users WHERE username = @username`;\nmsg.params = [\n    { name: 'username', type: 'VarChar', value: msg.credentials.username }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7d44b25186f8007c",
        "type": "http response",
        "z": "aba326dbe5621f19",
        "name": "Bad Request",
        "statusCode": "400",
        "headers": {},
        "x": 1690,
        "y": 280,
        "wires": []
    },
    {
        "id": "563b866a043fcccd",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "400 Bad Request",
        "func": "msg.payload = {\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Bad Request.\",\n    \"description\": \"The request cannot be processed due to malformed syntax. Please check the request format and parameters.\",\n    \"errors\": [\n      {\n        \"field\": \"email\",\n        \"message\": \"Email is invalid.\"\n      },\n      {\n        \"field\": \"password\",\n        \"message\": \"Password must be at least 8 characters long.\"\n      }\n    ],\n    \"type\": \"INVALID_REQUEST_SYNTAX\",\n    \"documentation_url\": \"https://yourapi.com/docs/errors#400\"\n  }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d616e425f3e9d672",
        "type": "http response",
        "z": "aba326dbe5621f19",
        "name": "Too Many Requests",
        "statusCode": "429",
        "headers": {},
        "x": 560,
        "y": 560,
        "wires": []
    },
    {
        "id": "16da9591dcfc40dd",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Rate limit",
        "func": "msg.payload = {\n  \"error\": {\n    \"code\": 429,\n    \"message\": \"Too Many Requests.\",\n    \"description\": \"You have exceeded the request limit for this API. Please wait before sending more requests.\",\n    \"retry_after_seconds\": 60\n  }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 560,
        "wires": [
            [
                "d616e425f3e9d672"
            ]
        ]
    },
    {
        "id": "b93fd75ddac4be16",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "function 11",
        "func": "// Assume `msg.payload` contains the error details or user input.\nlet responseBody;\nlet statusCode;\n\n// Check for different error conditions and set the status code and response body accordingly\nif (msg.payload.errorType === \"bad_request\") {\n    statusCode = 400;\n    responseBody = {\n        error: {\n            code: 400,\n            message: \"Bad Request\",\n            description: \"The server could not understand the request due to invalid syntax.\"\n        }\n    };\n} else if (msg.payload.errorType === \"unauthorized\") {\n    statusCode = 401;\n    responseBody = {\n        error: {\n            code: 401,\n            message: \"Unauthorized\",\n            description: \"Authentication is required and has failed or has not yet been provided.\"\n        }\n    };\n} else if (msg.payload.errorType === \"forbidden\") {\n    statusCode = 403;\n    responseBody = {\n        error: {\n            code: 403,\n            message: \"Forbidden\",\n            description: \"You do not have the necessary permissions to access this resource.\"\n        }\n    };\n} else {\n    // Default to internal server error\n    statusCode = 500;\n    responseBody = {\n        error: {\n            code: 500,\n            message: \"Internal Server Error\",\n            description: \"The server has encountered a situation it doesn't know how to handle.\"\n        }\n    };\n}\n\n// Set the status code and payload for the response\nmsg.statusCode = statusCode;\nmsg.payload = responseBody;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "58f67c0df0ba7e81",
        "type": "debug",
        "z": "aba326dbe5621f19",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 440,
        "wires": []
    },
    {
        "id": "9620f2395a93a3bb",
        "type": "switch",
        "z": "aba326dbe5621f19",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 280,
        "wires": [
            [
                "7d44b25186f8007c"
            ]
        ]
    },
    {
        "id": "d50c0b5f10f9a229",
        "type": "switch",
        "z": "aba326dbe5621f19",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 120,
        "wires": [
            [
                "4d1801ab7840c3fc"
            ]
        ]
    },
    {
        "id": "38a1abfd54aad44d",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "function 12",
        "func": "// This function assumes that the auth headers are basic auth.\n// Extract the base64 encoded string from the headers.\nconst authHeader = msg.req.headers.authorization;\n\n// If no auth header is present, return a 401 Unauthorized error.\nif (!authHeader) {\n    msg.statusCode = 401;\n    msg.payload = {\n        error: \"Unauthorized\",\n        message: \"No authentication headers provided.\"\n    };\n    return [null, msg]; // The first output is null to stop the flow\n}\n\n// If the authHeader is present, decode it to get the username\nconst base64Credentials = authHeader.split(' ')[1];\nconst credentials = Buffer.from(base64Credentials, 'base64').toString('ascii');\nconst [username, password] = credentials.split(':');\n\n// Now you would typically query your database to check if the username exists.\n// Since we can't perform asynchronous operations directly here,\n// we'll set the username on the message object and use a subsequent MSSQL node to query the database.\nmsg.username = username;\n\n// Pass the message to the next node (MSSQL node) to query the database.\n// We'll handle the result of that query in a different function node.\nreturn [msg, null]; // The second output is null because we don't want to return a response yet.\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "90d1bd4ebbbab7a1",
        "type": "switch",
        "z": "aba326dbe5621f19",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "403",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 200,
        "wires": [
            [
                "6a74b9ebbe6a6985"
            ]
        ]
    },
    {
        "id": "6a74b9ebbe6a6985",
        "type": "http response",
        "z": "aba326dbe5621f19",
        "name": "Forbidden",
        "statusCode": "403",
        "headers": {},
        "x": 1680,
        "y": 200,
        "wires": []
    },
    {
        "id": "d7cb6b325fb7278b",
        "type": "switch",
        "z": "aba326dbe5621f19",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "403",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 240,
        "wires": [
            [
                "fda3fb06749734d7"
            ]
        ]
    },
    {
        "id": "fda3fb06749734d7",
        "type": "http response",
        "z": "aba326dbe5621f19",
        "name": "Bad Request",
        "statusCode": "400",
        "headers": {},
        "x": 1690,
        "y": 240,
        "wires": []
    },
    {
        "id": "1a80a67fcb64e2f9",
        "type": "http response",
        "z": "aba326dbe5621f19",
        "name": "Internal Server Error",
        "statusCode": "500",
        "headers": {},
        "x": 1720,
        "y": 80,
        "wires": []
    },
    {
        "id": "4dcafb69db94de0a",
        "type": "switch",
        "z": "aba326dbe5621f19",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "500",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 80,
        "wires": [
            [
                "1a80a67fcb64e2f9"
            ]
        ]
    },
    {
        "id": "55e0124b0801813c",
        "type": "switch",
        "z": "aba326dbe5621f19",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b06b08ad0c5219fd",
        "type": "debug",
        "z": "aba326dbe5621f19",
        "name": "debug 51",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 260,
        "wires": []
    },
    {
        "id": "82fcd7c54b8b160d",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Main function (imported)",
        "func": "const requestBody = msg.payload;\nlet tableName = \"\";\nconst DEFAULT_COUNT = 10;\nlet query = \"\";\nlet queryParams = [];\n\nconst {\n    method,\n    params,\n    rows = DEFAULT_COUNT\n} = requestBody;\n\nswitch (method) {\n    case \"getDowntimeHistory\":\n        tableName = \"litmus.dbo.downtimeHistory\";\n        query = `SELECT TOP ${rows} * FROM ${tableName} WHERE startTime >= @startDate AND endTime < @endDate AND line = @line AND asset = @asset AND scrapCode_text = @scrapCode_text`;\n        queryParams = [\n            { name: 'startDate', value: params.startTime, type: 'VarChar' },\n            { name: 'endDate', value: params.endTime, type: 'VarChar' },\n            { name: 'line', value: params.line, type: 'VarChar' },\n            { name: 'asset', value: params.asset, type: 'VarChar' },\n            { name: 'reasonCode_L1_text', value: params.reasonCode_L1_text, type: 'VarChar' },\n            { name: 'reasonCode_L2_text', value: params.reasonCode_L2_text, type: 'VarChar' }\n        ];\n        break;\n        \n    //done\n     case \"getScrapHistory\":\n        tableName = \"litmus.dbo.scrapHistory\";\n        query = `SELECT TOP ${rows} * FROM ${tableName} WHERE scrapTime BETWEEN @startDate AND @endDate AND line = @line AND asset = @asset AND scrapCode_text = @scrapCode_text`;\n        queryParams = [\n            { name: 'startDate', value: params.startDate, type: 'VarChar' },\n            { name: 'endDate', value: params.endDate, type: 'VarChar' },\n            { name: 'line', value: params.line, type: 'VarChar' },\n            { name: 'asset', value: params.asset, type: 'VarChar' },\n            { name: 'scrapCode_text', value: params.scrapCode_text, type: 'VarChar' }\n        ];\n        break;  // Prevent fall-through with a break statement\n    // case \"incidentTeam\":\n    //     tableName = \"litmus.dbo.incident_team\";\n    //     query = `SELECT TOP ${rows} * FROM ${tableName} WHERE scrapTime BETWEEN @startDate AND @endDate AND line = @line AND asset = @asset AND scrapCode_text = @scrapCode_text`;\n    //     queryParams = [\n    //         { name: 'startDate', value: params.startDate, type: 'VarChar' },\n    //         { name: 'endDate', value: params.endDate, type: 'VarChar' },\n    //         { name: 'line', value: params.line, type: 'VarChar' },\n    //         { name: 'asset', value: params.asset, type: 'VarChar' },\n    //         { name: 'scrapCode_text', value: params.scrapCode_text, type: 'VarChar' }\n    //     ];\n    //     break;  // Prevent fall-through with a break statement\n    // case \"incidentUser\":\n    //     tableName = \"litmus.dbo.incident_user\";\n    //     break;  // Prevent fall-through with a break statement\n    // case \"reasonCodes\":\n    //     tableName = \"litmus.dbo.reasonCodes\";\n    //     break;  // Prevent fall-through with a break statement\n    // case \"scrapCodes\":\n    //     tableName = \"litmus.dbo.scrapCodes\";\n    //     break;  // Prevent fall-through with a break statement\n   \n   \n    default:\n        // Handle unknown method\n        msg.payload = {\n            error: true,\n            message: \"Invalid 'method' specified in the request.\"\n        };\n        msg.statusCode = 400; // Bad Request HTTP status code\n        return msg; // Stop execution and return error message\n}\n\nmsg.topic = query;\nmsg.payload = queryParams;\n\n\n// Continue with the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f13e006034c969e9",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Credentials Verification ",
        "func": "if (msg.authenticationMethod === 'apiKey') {\n    // Assuming the database query checks for existence and you use the result to validate\n    let apiKeyExists = msg.payload[0]?.keyCount > 0; // Adjust based on your actual payload structure and query result\n\n    if (apiKeyExists) {\n        msg.payload = { success: true, message: \"API key authentication successful.\" };\n        msg.statusCode = 200;\n    } else {\n        msg.payload = { success: false, message: \"Invalid API key.\" };\n        msg.statusCode = 401; // Unauthorized\n    }\n} else if (msg.authenticationMethod === 'usernamePassword') {\n    // Username/Password Authentication\n    // Assuming you have fetched the stored password from the database for the given username\n    let storedPassword = msg.payload[0]?.password; // Adjust based on your actual payload structure\n    let providedPassword = msg.providedPassword;\n\n    // Compare the provided password against the stored password\n    // This example assumes plain text comparison, consider using hashed passwords in a real application\n    if (providedPassword && providedPassword === storedPassword) {\n        msg.payload = { success: true, message: \"Username and password authentication successful.\" };\n        msg.statusCode = 200;\n    } else {\n        msg.payload = { success: false, message: \"Authentication failed.\" };\n        msg.statusCode = 401; // Unauthorized\n    }\n} else {\n    // If the authentication method is not recognized or not provided correctly\n    msg.payload = { success: false, message: \"Unsupported authentication method.\" };\n    msg.statusCode = 400; // Bad Request\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 360,
        "wires": [
            [
                "359104480268e22a",
                "3d44432df3d92a9d",
                "bf1a3964bdf7e3d3"
            ]
        ]
    },
    {
        "id": "730aabc50aa8a8a4",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "function 17",
        "func": "let id = msg.payload.id;\n\n// Create an object for the parameters\n// It should match the expected format by the MSSQL-PLUS node\n//msg.payload = {}; // Clearing payload for MSSQL-PLUS to avoid conflicts\nmsg.parameters = [\n    {\n        name: \"id\",\n        value: id,\n        type: \"Int\"\n    }\n];\n\nmsg.topic = \"SELECT * FROM litmus.dbo.scrapHistory WHERE id = @id\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ee5e23433367ad83",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Configuration Object",
        "func": "// A configuration object that defines the expected parameters for each table.\nconst tableConfigs = {\n    scrapHistory: {\n        tableName: \"litmus.dbo.scrapHistory\",\n        validParams: ['startDate', 'endDate', 'line', 'asset', 'scrapCode_text']\n        // ... other table-specific configurations\n    },\n    downtimeHistory: {\n        tableName: \"litmus.dbo.downtimeHistory\",\n        validParams: ['startDate', 'endDate', 'machineID']\n        // ... other table-specific configurations\n    },\n    // ... configurations for other tables\n};\n\nconst requestBody = msg.payload;\nlet queryParams = [];\nlet conditions = [];\nlet queryBase = \"\";\nlet tableName = \"\";\nlet rows = requestBody.rows || 100;\n\n// Determine the table and parameters based on the method provided in the request\nconst tableConfig = tableConfigs[requestBody.method];\n\nif (tableConfig) {\n    tableName = tableConfig.tableName;\n    queryBase = `SELECT TOP ${rows} * FROM ${tableName}`;\n    // Iterate over the validParams and check if they have been provided in the request\n    tableConfig.validParams.forEach(param => {\n        if (requestBody.params[param]) {\n            conditions.push(`${param} = @${param}`);\n            queryParams.push({\n                name: param,\n                value: requestBody.params[param],\n                type: 'VarChar' // This should be set according to the actual data type of the field\n            });\n        }\n    });\n} else {\n    node.error(\"Invalid method provided\");\n    return null; // Stop the flow since we encountered an error\n}\n\n// Build the full SQL query\nlet sqlQuery = queryBase;\nif (conditions.length) {\n    sqlQuery += \" WHERE \" + conditions.join(\" AND \");\n}\n\nmsg.topic = sqlQuery;\nmsg.payload = queryParams;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9b043cb3fb805cc7",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Configuration Object v2 (downtime History)",
        "func": "const requestBody = msg.payload;\nlet rows = msg.req.body.rows;\nconst tableName = \"litmus.dbo.downtimeHistory\"; // The table you are querying\nconst DEFAULT_ROWS = 100;\nlet queryBase = `SELECT TOP ${rows || DEFAULT_ROWS} * FROM ${tableName}`;\nlet queryParams = [];\nlet whereConditions = [];\n\n// Dynamically construct the WHERE clause based on supplied parameters\nfor (const param in requestBody.params) {\n    const value = requestBody.params[param];\n    if (value) { // Assuming an empty string is not a valid value\n        switch (param) {\n            case \"startDate\":\n                whereConditions.push(`startTime >= @startDate`);\n                queryParams.push({ name: 'startDate', value: value, type: 'DateTime' });\n                break;\n            case \"endDate\":\n                whereConditions.push(`endTime <= @endDate`);\n                queryParams.push({ name: 'endDate', value: value, type: 'DateTime' });\n                break;\n            case \"reasonCode_L1_text\":\n            case \"reasonCode_L2_text\":\n            case \"asset\":\n            case \"line\":\n                // Directly mapping other parameters to database columns\n                whereConditions.push(`${param} = @${param}`);\n                queryParams.push({ name: param, value: value, type: 'VarChar' }); // Adjust the type as needed\n                break;\n            // You can add more cases here if you have more parameters\n        }\n    }\n}\n\n// Combine all conditions to form the WHERE clause, if there are any conditions\nif (whereConditions.length > 0) {\n    queryBase += \" WHERE \" + whereConditions.join(\" AND \");\n}\n\n// Set the query and parameters for the MSSQL node\nmsg.topic = queryBase;\nmsg.payload = queryParams; // This should be an array of objects with name and value properties\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 400,
        "wires": [
            [
                "5d2aea17334fed6a"
            ]
        ]
    },
    {
        "id": "2ba68badc0542e79",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Configuration Object v2 (scrapHistory)",
        "func": "const requestBody = msg.payload;\nlet rows = msg.req.body.rows;\nconst tableName = \"litmus.dbo.scrapHistory\"; // The table you are querying\nconst DEFAULT_ROWS = 100;\nlet queryBase = `SELECT TOP ${rows || DEFAULT_ROWS} * FROM ${tableName}`;\nlet queryParams = [];\nlet whereConditions = [];\n\n// Dynamically construct the WHERE clause based on supplied parameters\nfor (const param in requestBody.params) {\n    const value = requestBody.params[param];\n    if (value) {  // Assuming an empty string is not a valid value\n        if (param === \"startDate\" || param === \"endDate\") {\n            const operator = param === \"startDate\" ? \">=\" : \"<=\";\n            whereConditions.push(`scrapTime ${operator} @${param}`);\n            queryParams.push({ name: param, value: value, type: 'DateTime' });\n        } else {\n            // For other parameters that directly map to database columns\n            whereConditions.push(`${param} = @${param}`);\n            queryParams.push({ name: param, value: value, type: 'VarChar' }); // Adjust the type as needed\n        }\n    }\n}\n\n// Combine all conditions to form the WHERE clause, if there are any conditions\nif (whereConditions.length > 0) {\n    queryBase += \" WHERE \" + whereConditions.join(\" AND \");\n}\n\n// Set the query and parameters for the MSSQL node\nmsg.topic = queryBase;\nmsg.payload = queryParams; // This should be an array of objects with name and value properties\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 440,
        "wires": [
            [
                "5d2aea17334fed6a"
            ]
        ]
    },
    {
        "id": "794cd0f8789638d5",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Configuration Object v2 (scrapCodes)",
        "func": "const requestBody = msg.payload;\nlet rows = msg.req.body.rows;\nconst tableName = \"litmus.dbo.scrapCodes\"; // The table you are querying\nconst DEFAULT_ROWS = 100;\nlet queryBase = `SELECT TOP ${rows || DEFAULT_ROWS} * FROM ${tableName}`;\nlet queryParams = [];\nlet whereConditions = [];\n\n// Dynamically construct the WHERE clause based on supplied parameters\nfor (const param in requestBody.params) {\n    const value = requestBody.params[param];\n    if (value) {  // Assuming an empty string is not a valid value\n        if (param === \"startDate\" || param === \"endDate\") {\n            const operator = param === \"startDate\" ? \">=\" : \"<=\";\n            whereConditions.push(`scrapTime ${operator} @${param}`);\n            queryParams.push({ name: param, value: value, type: 'DateTime' });\n        } else {\n            // For other parameters that directly map to database columns\n            whereConditions.push(`${param} = @${param}`);\n            queryParams.push({ name: param, value: value, type: 'VarChar' }); // Adjust the type as needed\n        }\n    }\n}\n\n// Combine all conditions to form the WHERE clause, if there are any conditions\nif (whereConditions.length > 0) {\n    queryBase += \" WHERE \" + whereConditions.join(\" AND \");\n}\n\n// Set the query and parameters for the MSSQL node\nmsg.topic = queryBase;\nmsg.payload = queryParams; // This should be an array of objects with name and value properties\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 520,
        "wires": [
            [
                "5d2aea17334fed6a"
            ]
        ]
    },
    {
        "id": "b614db3d08a3beef",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Configuration Object v2 (incidentUser)",
        "func": "const requestBody = msg.payload;\nlet rows = msg.req.body.rows;\nconst tableName = \"litmus.dbo.incident_user\"; // The table you are querying\nconst DEFAULT_ROWS = 100;\nlet queryBase = `SELECT TOP ${rows || DEFAULT_ROWS} * FROM ${tableName}`;\nlet queryParams = [];\nlet whereConditions = [];\n\n// Dynamically construct the WHERE clause based on supplied parameters\nfor (const param in requestBody.params) {\n    const value = requestBody.params[param];\n    if (value) {  // Assuming an empty string is not a valid value\n       // For other parameters that directly map to database columns\n        whereConditions.push(`${param} = @${param}`);\n        queryParams.push({ name: param, value: value, type: 'VarChar' }); // Adjust the type as needed\n    }\n}\n\n// Combine all conditions to form the WHERE clause, if there are any conditions\nif (whereConditions.length > 0) {\n    queryBase += \" WHERE \" + whereConditions.join(\" AND \");\n}\n\n// Set the query and parameters for the MSSQL node\nmsg.topic = queryBase;\nmsg.payload = queryParams; // This should be an array of objects with name and value properties\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 480,
        "wires": [
            [
                "5d2aea17334fed6a"
            ]
        ]
    },
    {
        "id": "a21dd7501b53d7d5",
        "type": "switch",
        "z": "aba326dbe5621f19",
        "name": "Switch",
        "property": "req.body.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "getDowntimeHistory",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "getScrapHistory",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "getIncidentUser",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "getScrapCodes",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 370,
        "y": 420,
        "wires": [
            [
                "9b043cb3fb805cc7"
            ],
            [
                "2ba68badc0542e79"
            ],
            [
                "b614db3d08a3beef"
            ],
            [
                "794cd0f8789638d5"
            ]
        ]
    },
    {
        "id": "359104480268e22a",
        "type": "switch",
        "z": "aba326dbe5621f19",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1070,
        "y": 260,
        "wires": [
            [
                "72b53611c7e1f13d"
            ]
        ]
    },
    {
        "id": "3d44432df3d92a9d",
        "type": "switch",
        "z": "aba326dbe5621f19",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1070,
        "y": 320,
        "wires": [
            [
                "e3526f78e93eeb5b"
            ]
        ]
    },
    {
        "id": "72b53611c7e1f13d",
        "type": "http response",
        "z": "aba326dbe5621f19",
        "name": "",
        "statusCode": "401",
        "headers": {},
        "x": 1220,
        "y": 260,
        "wires": []
    },
    {
        "id": "bf1a3964bdf7e3d3",
        "type": "debug",
        "z": "aba326dbe5621f19",
        "name": "debug 52",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 200,
        "wires": []
    },
    {
        "id": "e2ea744cd9aeb0c1",
        "type": "http response",
        "z": "aba326dbe5621f19",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 660,
        "y": 240,
        "wires": []
    },
    {
        "id": "ee3422af16298a41",
        "type": "switch",
        "z": "aba326dbe5621f19",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "400",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 260,
        "wires": [
            [
                "e2ea744cd9aeb0c1"
            ]
        ]
    },
    {
        "id": "eb230fddeb5cba56",
        "type": "function",
        "z": "aba326dbe5621f19",
        "name": "Credentials Extraction ",
        "func": "let username = msg.payload.username;\nlet password = msg.payload.password;\n// Adjusted to consistently get the API key, ensuring we account for both direct payload and req.body\nlet apiKey = msg.payload.api_key || msg.req.body.api_key;\n\n// Determine the authentication method and set up accordingly\nif (apiKey) {\n    // For API key authentication\n    msg.authenticationMethod = 'apiKey';\n    msg.apiKey = apiKey;\n    // Adjusted for consistency in parameterization\n    msg.topic = `SELECT COUNT(apiKey) AS keyCount FROM litmus.dbo.api_key WHERE apiKey = @apiKey`;\n    msg.parameters = [\n        { name: \"apiKey\", value: msg.apiKey, type: \"VarChar\" }\n    ];\n} else if (username && password) {\n    // For username/password authentication\n    msg.authenticationMethod = 'usernamePassword';\n    // Ensure the query matches the parameterization style\n    msg.topic = 'SELECT password FROM litmus.dbo.users WHERE username = @username';\n    msg.parameters = [\n        { name: \"username\", value: username, type: \"VarChar\" }\n    ];\n    // Store provided password for comparison later\n    msg.providedPassword = password;\n} else {\n    // Neither method provided adequately\n    msg.payload = { success: false, message: \"Authentication requires either an API key or both username and password.\" };\n    msg.statusCode = 400; // Bad Request\n    return msg;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 320,
        "wires": [
            [
                "ee3422af16298a41",
                "29acc902adb36e7d",
                "9463d0385db06f16"
            ]
        ]
    },
    {
        "id": "99aa93fffde390a2",
        "type": "MSSQL-CN",
        "name": "litmus",
        "server": "192.168.0.232",
        "port": "",
        "encyption": false,
        "trustServerCertificate": false,
        "database": "",
        "useUTC": false,
        "connectTimeout": "",
        "requestTimeout": "",
        "cancelTimeout": "",
        "pool": "",
        "parseJSON": false,
        "enableArithAbort": true,
        "readOnlyIntent": false
    }
]